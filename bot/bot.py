import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from app.config import BOT_TOKEN, API_URL

logging.basicConfig(level=logging.INFO)


def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /posts, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.")


def posts(update: Update, context: CallbackContext):
    try:
        resp = requests.get(f"{API_URL}/posts/")
        resp.raise_for_status()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    posts = resp.json()

    if not posts:
        update.message.reply_text("–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = [
        [InlineKeyboardButton(text=post["title"], callback_data=str(post["id"]))]
        for post in posts
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç:", reply_markup=reply_markup)


def post_detail(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    post_id = query.data
    try:
        resp = requests.get(f"{API_URL}/posts/{post_id}")
        resp.raise_for_status()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç.")
        return

    post = resp.json()
    text = f"üìù <b>{post['title']}</b>\n\n{post['content']}\n\nüóì {post['created_at']}"
    query.edit_message_text(text=text, parse_mode="HTML")


def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("posts", posts))
    dp.add_handler(CallbackQueryHandler(post_detail))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
